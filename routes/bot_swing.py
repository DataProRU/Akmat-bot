from fastapi import APIRouter, Request, Depends, Form
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse
from sqlalchemy.orm import Session
from database import Session as DatabaseSession
from models import SwingShift, SwingReason
from pytz import timezone
import gspread
from datetime import datetime
import logging
from typing import List, Union
from babel.dates import format_date
import requests


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()
templates = Jinja2Templates(directory="templates")
moscow_tz = timezone('Europe/Moscow')


def get_db():
    db = DatabaseSession()
    try:
        yield db
    finally:
        db.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è worksheet
def init_gspread():
    try:
        gc = gspread.service_account(filename="credentials.json")
        sheet = gc.open_by_url(
            'https://docs.google.com/spreadsheets/d/1tKxNewX91eNOHpYVqDy_EslNV2cSTf8w9lttXRucp6s/edit?gid=0#gid=0'
        )
        return sheet.get_worksheet(1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ gspread: {str(e)}")
        return None


worksheet = init_gspread()


@router.get("/bot_swing", response_class=HTMLResponse)
async def directory(request: Request, username: str, db: Session = Depends(get_db)):
    try:
        shifts = db.query(SwingShift).all()
        reasons = db.query(SwingReason).all()
        return templates.TemplateResponse(
            "swing.html",
            {"request": request, "shifts": shifts, "username": username, "reasons": reasons},
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return JSONResponse(content={"message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status_code=500)



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TELEGRAM_BOT_TOKEN = "8125373869:AAFKywhECD_BqwUgaGvsQUpv_zSZeHiWDqI"
chat_ids = [ 702856294, 1129601494]  # –°–ø–∏—Å–æ–∫ chat_id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π


@router.post("/send_report")
async def send_report(
        username: str = Form(None),
        klichka: int = Form(None),
        qr: int = Form(None),
        terminal: str = Form(None),
        shift: Union[str, List[str]] = Form(None),
        additional: str = Form(None),
        reason: str = Form(None),
        comment: str = Form(None),
        checksCount: int = Form(None)
):
    global worksheet
    if not worksheet:
        return JSONResponse(content={"message": "–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π"}, status_code=500)

    try:
        if isinstance(shift, list):
            shift = ', '.join(shift)

        worksheet.format('C:C', {"numberFormat": {"type": "NUMBER"}})
        current_time = datetime.now(moscow_tz)
        new_date = format_date(current_time, "d MMMM", locale="ru")

        months_nom = [
            "–Ø–ù–í–ê–†–¨", "–§–ï–í–†–ê–õ–¨", "–ú–ê–†–¢", "–ê–ü–†–ï–õ–¨", "–ú–ê–ô", "–ò–Æ–ù–¨",
            "–ò–Æ–õ–¨", "–ê–í–ì–£–°–¢", "–°–ï–ù–¢–Ø–ë–†–¨", "–û–ö–¢–Ø–ë–†–¨", "–ù–û–Ø–ë–†–¨", "–î–ï–ö–ê–ë–†–¨"
        ]
        months_dict = {
            "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
            "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
        }

        dates_column = worksheet.col_values(1)
        if dates_column:
            last_date_str = dates_column[-1]
            day, month = last_date_str.split()
            month_number = months_dict[month]
            last_date_str_with_year = f"{day} {month_number} {current_time.year}"
            last_date = datetime.strptime(last_date_str_with_year, "%d %m %Y")
            last_date = moscow_tz.localize(last_date)
            if last_date.month != current_time.month or last_date.year != current_time.year:
                next_row = len(worksheet.get_all_values()) + 1
                worksheet.insert_row([f"{months_nom[current_time.month - 1]} {current_time.year}"], index=next_row,
                                     value_input_option="USER_ENTERED")

        if additional == "–†–∞–±–æ—Ç–∞–ª–∏":
            additional = "Ôºã"
        else:
            additional = "Ôºç"

        next_row = len(worksheet.get_all_values()) + 1
        new_row = [
            new_date,
            username,
            klichka,
            qr,
            terminal,
            checksCount,
            shift,
            additional,
            reason,
            comment,
        ]
        worksheet.insert_row(new_row, index=next_row, value_input_option="USER_ENTERED")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        if additional == "Ôºã":
            message = (
                "<b>–í–´–ö–û–ì–û–†–ù–´–ï –ö–ê–ß–ï–õ–ò</b> üü£\n"
                "\n"
                f"–û—Ç—á–µ—Ç –∑–∞ <b>{new_date}</b>\n"
                f"–í—ã—Ä—É—á–∫–∞ <b>{int(klichka) + int(terminal) + int(qr)} ‚ÇΩ</b>\n"
                "\n"
                "<b>–ò–∑ –Ω–∏—Ö:</b>\n"
                f"–ù–∞–ª–∏—á–∫–∞ <b>{klichka} ‚ÇΩ</b>\n"
                f"–ë–µ–∑–Ω–∞–ª <b>{terminal} ‚ÇΩ</b>\n"
                f"QR <b>{qr} ‚ÇΩ</b>\n"
                f"–ß–µ–∫–æ–≤ <b>{checksCount} —à—Ç</b>\n"
                "\n"
                f"–†–∞–±–æ—Ç–∞–ª–∏: \n <b>{shift}</b>"
            )
        elif additional == "Ôºç":
            message = (
                "<b>–í–´–ö–û–ì–û–†–ù–´–ï –ö–ê–ß–ï–õ–ò</b> üü£\n"
                f"–û—Ç—á–µ—Ç –∑–∞ <b>{new_date}</b>\n"
                "–ù–µ —Ä–∞–±–æ—Ç–∞–ª–∏ ‚ùå\n"
                f"–ü—Ä–∏—á–∏–Ω–∞:\n{reason}"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É chat_id –∏–∑ —Å–ø–∏—Å–∫–∞
        for chat_id in chat_ids:
            telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            response = requests.post(telegram_url, data=data)
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (chat_id={chat_id}): {response.text}")

        # –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ additional == "Ôºã"
        if additional == "Ôºã":
            salary_message = "–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
            total_salary = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ê—Å–ª–∞–Ω –≤ —Å–º–µ–Ω–µ
            if "–ê—Å–ª–∞–Ω" in shift:
                aslan_salary = 2000
                salary_message += f"–ê—Å–ª–∞–Ω: {aslan_salary} ‚ÇΩ\n"
                total_salary += aslan_salary

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –†–µ–Ω–∞—Ç –≤ —Å–º–µ–Ω–µ
            if "–†–µ–Ω–∞—Ç" in shift:
                # –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –†–µ–Ω–∞—Ç–∞
                renat_salary = (
                                       (klichka * 0.9) +  # –ù–∞–ª–∏—á–∫–∞: 10% –∫–æ–º–∏—Å—Å–∏—è
                                       (qr * 0.89) +  # QR: 11% –∫–æ–º–∏—Å—Å–∏—è
                                       (int(terminal) * 0.87) +  # –ü–µ—Ä–µ–≤–æ–¥—ã: 13% –∫–æ–º–∏—Å—Å–∏—è
                                       (checksCount * 450)  # –ß–µ–∫–∏ √ó 450 –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
                ) * 0.1  # 10% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
                salary_message += f"–†–µ–Ω–∞—Ç: {renat_salary:.2f} ‚ÇΩ\n"
                total_salary = 2500

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç
            salary_message += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç: {total_salary} ‚ÇΩ"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö

            data = {
                    "chat_id": 702856294,
                    "text": salary_message,
                    "parse_mode": "HTML"
                }
            response = requests.post(telegram_url, data=data)
            if response.status_code != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö (chat_id={chat_id}): {response.text}")

        return JSONResponse(content={"message": "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        return JSONResponse(content={"message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status_code=500)
